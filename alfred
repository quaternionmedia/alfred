#!/bin/sh
VERSION=v0.1.3

# Returns a greeting quote to the user.
echo
shuf -n 1 quotes.csv
echo

downloadMedia() {
  echo "downloading demo media"
  mkdir -p videos && cd videos
  wget -N https://storage.googleapis.com/tower-bucket/moon.mp4
  wget -N https://storage.googleapis.com/tower-bucket/train.mp4
  wget -N https://storage.googleapis.com/tower-bucket/ATripToTheMoon-300k.mp4
  wget -N https://storage.googleapis.com/tower-bucket/TheGreatTrainRobbery-300k.mp4
  cd ..
}

if [ $1 = "version" -o $1 = "v" -o $1 = "-v" ]; then
  echo $VERSION

# Starts in development (optional "--build")
elif [ $1 = "dev" ] || [ -z $1 ]; then
  if [ !-z ]; then shift; fi
  echo "Alfred! running dev $1"
  docker-compose -f docker-compose.yml -f dev.yml up $1

# Starts in production.
elif [ $1 = "prod" -o $1 = "production" -o $1 = "p" ]; then
  shift
  echo "Alfred! running production $1"
  docker-compose down && \
  docker-compose -f docker-compose.yml -f production.yml up --build -d $1

# Installs the dependencies.
elif [ $1 = "i" -o $1 = "install" ]; then
  shift
  echo "installing dependencies"
  make install

elif [ $1 = "demo" -o $1 = "download" -o $1 = "samples" ]; then
  shift
  downloadMedia

elif [ $1 = "restart" -o $1 = "r" ]; then
  shift
  docker-compose -f docker-compose.yml -f production.yml restart

elif [ $1 = "seed" -o $1 = "db" ]; then
  shift
  docker-compose exec api python3 -c """
from seed import seed
from main import db
from otto.defaults import sample_forms

if db.edls.count_documents({}) == 0:
  db.edls.insert_many(seed)
if db.projects.count_documents({}) == 0:
  db.projects.insert_many(sample_forms)
"""

elif [ $1 = "reinit" -o $1 = "reseed" ]; then
  shift
  docker-compose exec api python3 -c """
from seed import seed
from main import db
from otto.defaults import sample_forms
db.edls.drop()
db.edls.insert_many(seed)
db.projects.drop()
db.projects.insert_many(sample_forms)
"""

elif [ $1 = "update" -o $1 = "u" ]; then
  shift
  git pull && git submodule update

elif [ $1 = "sh" ]; then
  shift
  docker-compose exec api sh

elif [ $1 = "log" -o $1 = "logs" -o $1 = "l" ]; then
  shift
  docker-compose logs -f

elif [ $1 = "worker" -o $1 = "w" ]; then
  shift
  celery worker --workdir api -A tasks:renderer -l debug -b pyamqp://192.168.192.20 --result-backend rpc://

elif [ $1 = "dump" ]; then
  shift
  DATE=`date "+%Y-%m-%d-%H%M%S"`
  FILENAME=alfred_db_$DATE.gz
  docker-compose exec db sh -c "mongodump --db alfred --gzip --archive=$FILENAME"
  docker container cp alfred_db_1:$FILENAME $FILENAME

elif [ $1 = "restore" ]; then
  shift
  docker container cp $1 alfred_db_1:/$1
  docker-compose exec db sh -c "mongorestore --gzip --db alfred --archive=/$1 --drop"

fi
