{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Alfred","text":"<p>Automatic video tools</p> <p></p>"},{"location":"#overview","title":"Overview","text":"<p>Alfred is a web based video editing suite, designed to simplify the production process using modern, cloud based solutions.</p>"},{"location":"#features","title":"Features","text":""},{"location":"#rendering","title":"Rendering","text":"<ul> <li>Server based rendering<ul> <li>Optional: Use an existing physical or virtual server as an additional rendering node</li> </ul> </li> <li>Cloud monitoring tools to check status</li> <li>Secure file storage and downloading</li> </ul>"},{"location":"#editing","title":"Editing","text":"<ul> <li>Create and modify edits with any HTML5 browser</li> <li>No need for powerful editing hardware</li> <li>Supports mobile devices</li> </ul> <ul> <li>Preview finished product in browser</li> <li>Render final videos in the cloud</li> <li>Output to different resolutions and formats   </li> </ul>"},{"location":"#templates","title":"Templates","text":"<ul> <li>Define dynamic <code>Templates</code> for clips</li> <li>Create forms for end users to customize a video from a Template</li> <li>Apply <code>fx</code> to clips for text and video animations</li> </ul>"},{"location":"#forms","title":"Forms","text":"<ul> <li>Design simple forms for end users to apply data into templates</li> <li>Define dynamic properties that can pull from multiple sources</li> </ul>"},{"location":"#origin","title":"Origin","text":"<p>Alfred began as a simple, serverless video client, designed to simplify the video production process using modern web browsers with a powerful, scalable rendering engine.</p> <p>Since then, the project has grown to include a suite of video and editing tools, including rendering, template generation, and automations.</p> <p>Alfred Hitchcock</p> <p>Drama is life with all the dull bits cut out.</p>"},{"location":"#links","title":"Links","text":"<p>App: alfred.quaternion.media</p> <p>Documentation: alfred.quaternion.media/docs/</p> <p>API Reference: alfred.quaternion.media/api</p> <p>Source code: github.com/quaternionmedia/alfred</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#concepts","title":"Concepts","text":"<p>While no video experience is needed to use Alfred effectively, familiarity with the concepts of video editing will be helpful.</p>"},{"location":"about/#design","title":"Design","text":"<p>Alfred is split into several components:</p>"},{"location":"about/#website","title":"website","text":"<p>The browser based tools to create and edit videos, including:</p> <ul> <li>\"simple\" single-track video editor</li> <li>\"advanced\" multi-track video editor</li> <li>template rendering forms</li> <li>preview frame of video</li> <li>check renders status and download</li> </ul>"},{"location":"about/#api","title":"API","text":"The video rendering components, available as a backend service."},{"location":"about/#models","title":"Models","text":"<p>This section provides information on the properties available in all the models.</p>"},{"location":"about/#clip","title":"Clip","text":""},{"location":"about/#template","title":"Template","text":""},{"location":"about/#edl","title":"Edl","text":""},{"location":"about/#project","title":"Project","text":""},{"location":"about/#render","title":"Render","text":""},{"location":"about/clip/","title":"Clip","text":"A <code>Clip</code> describes a single media source to use in a video project, represented as a <code>json</code> dictionary. <pre><code>class Clip:\n    duration: float = 5\n    type: str\n    name: str\n    inpoint: float\n    outpoint: float\n    offset: float\n    start: float\n    position: tuple\n    data: dict\n    resize: [float, tuple]\n    relative: bool = True\n    fxs: dict\n</code></pre>"},{"location":"about/clip/#properties","title":"Properties","text":"<p>All fields are optional.</p>"},{"location":"about/clip/#duration","title":"<code>duration</code>","text":"<p><code>float</code></p> <p>The total length of this clip, in seconds.</p>"},{"location":"about/clip/#type","title":"<code>type</code>","text":"<p><code>str</code></p> <p>Type of clip. Possible values include:</p> <ul> <li>video</li> <li>audio</li> </ul>"},{"location":"about/clip/#name","title":"<code>name</code>","text":"<p><code>str</code></p> <p>The name of this clip. For <code>type: video</code>, this is the url, or relative server path to the desired video.</p>"},{"location":"about/clip/#inpoint","title":"<code>inpoint</code>","text":"<p><code>float</code></p> <p>The number of seconds from the beginning of clip to the desired start time of the video.</p>"},{"location":"about/clip/#outpoint","title":"<code>outpoint</code>","text":"<p><code>float</code></p> <p>The number of seconds from the beginning of clip to the desired end time of the video.</p>"},{"location":"about/clip/#offset","title":"<code>offset</code>","text":"<p><code>float</code></p> <p>Offset the start time of the video by <code>n</code> seconds.</p> <p>A positive value behaves the same as <code>start</code>, delaying the start time by <code>n</code> seconds</p> <p>A negative value behaves like a negative <code>inpoint</code>, and will trim from the beginning of clip by <code>n</code> seconds.</p>"},{"location":"about/clip/#start","title":"<code>start</code>","text":"<p><code>float</code></p> <p>The number of seconds to delay the start of the clip.</p> <p>Positive values only.</p>"},{"location":"about/clip/#position","title":"<code>position</code>","text":"<p><code>tuple(float, float)</code></p> <p><code>relative: True</code> default - Reposition the clip by <code>(x, y)</code> percent of the frame.</p> <p><code>relative: False</code> - Reposition the clip by <code>(x, y)</code> pixels</p>"},{"location":"about/clip/#relative","title":"<code>relative</code>","text":"<p><code>bool = True</code></p> <p>Sets whether <code>position</code> acts as absolute position (pixel), or relative (percent).</p>"},{"location":"about/clip/#data","title":"<code>data</code>","text":"<p><code>dict</code></p> <p>Defines values to be rendered into the template. </p> <p>Data fields are specific to each template. See template</p> Sample JSON Template <pre><code>{\n  \"type\": \"title\", \n  \"data\": {\n    \"text\": \"Text to be rendered\",\n    \"font\": \"font_name\",\n    \"color\": \"#FF0000\",\n    \"textsize\": \"50\",\n    \"method\": \"caption\",\n    \"duration\": \"5\",\n    \"position\": \"center\",\n    \"opacity\": \".5\",\n  }\n}\n</code></pre>"},{"location":"about/clip/#resize","title":"<code>resize</code>","text":"<p><code>[float, tuple]</code></p> <p>Scale the size of the clip.</p> <ul> <li>float: Scale the clip by <code>x, x</code></li> <li>tuple: Resize the clip by <code>x, y</code></li> </ul>"},{"location":"about/clip/#fxs","title":"<code>fxs</code>","text":"<p><code>List</code></p> <p>Apply a list of <code>fx</code> to a clip.</p> <p>Available FX:</p> <ul> <li>boxReveal</li> <li>flyInAndGrow</li> <li>bezier2</li> <li>zoomFromCenter</li> <li>circleShrink</li> <li>boxShrink</li> <li>drawBoxOutline</li> </ul>"},{"location":"about/concepts/","title":"Concepts","text":""},{"location":"about/concepts/#timeline","title":"Timeline","text":"<p>In video editing, a <code>Timeline</code> is a representation of how to create a video.</p> <p>In most video editors, <code>Clips</code> are viewed as blocks, arranged from left to right in time, sized proportionate to their duration.</p>"},{"location":"about/concepts/#single-track-video-editing","title":"Single Track Video Editing","text":"<p>A <code>Timeline</code> where only one clip can be played at a time. </p> <p>This is represented as a List of clips, which can be rearranged in any order. Each clip will play until the <code>duration</code> is reached, or if not specified, the end of the video clip.</p> <p>The total duration of the video is the sum of the <code>duration</code>s of it's clips.</p>"},{"location":"about/concepts/#multitrack-video-editing","title":"Multitrack Video Editing","text":"<p>A <code>Timeline</code> where multiple videos can play simultaneously. Necessary for layering videos.</p> <p>A Multi-Track Timeline is also represented as a List of clips, where each video is rendered on a different \"track\", allowing multiple videos to be stacked on top of each other. When combined with transparencies, this allows for unlimited compositing opportunities for new videos.</p>"},{"location":"about/concepts/#clip","title":"Clip","text":"<p>A <code>Clip</code> is a single, continuous section of a video, referenced in a <code>Timeline</code>. </p> <p>Clips can be of several types, including <code>video</code>, <code>audio</code>, <code>template</code>, or <code>edl</code>.</p> <p>Timing of the clip is determined with the following variables:</p>"},{"location":"about/concepts/#inpoint","title":"<code>inpoint</code>","text":"The start time for playing this video, in seconds. Default: <code>0</code>"},{"location":"about/concepts/#outpoint","title":"<code>outpoint</code>","text":"The end time for playing this video, in seconds. Default: <code>video.duration</code>"},{"location":"about/concepts/#duration","title":"<code>duration</code>","text":"The length in seconds to play this video. Default: <code>video.duration</code> Timing math <p>The <code>duration</code> should always equal to the <code>outpoint - inpoint</code>.</p> <p>Any of these may be omitted, for example: </p> <p>A <code>Clip</code> with <code>outpoint: 10</code> and <code>duration: 5</code> implies <code>inpoint: 5</code></p> <p>For more details, refer to the Clip documentation.</p>"},{"location":"about/concepts/#template","title":"Template","text":"<p>A <code>Template</code> is a predefined <code>Clip</code> generator, built to automate and simplify the process of rendering custom text and graphics in video. </p> <p>Each template accepts parameters such as <code>text</code>, <code>font</code>, <code>fontsize</code>, <code>fontcolor</code>, <code>position</code>, <code>fxs</code>, and many others. </p> <p>By default, templates are transparent, which means they can be stacked on top of each other to render more complex video compositions.</p>"},{"location":"about/concepts/#edl","title":"EDL","text":"<p>An <code>EDL</code>, or Edit Decision List, is a list of <code>Clips</code> to be combined into a single video. </p> <p>The <code>EDL</code> is a data representation of the final video to be rendered. It describes all the steps necessary to take the source material (<code>video</code>, <code>photo</code>, <code>audio</code>, <code>templates</code>, etc.) and generate the desired final product.</p> <p>Each <code>EDL</code> can be viewed in a <code>Timeline</code>, or imported as a <code>Clip</code> into a different <code>Timeline</code>.</p>"},{"location":"about/concepts/#project","title":"Project","text":"<p>A <code>Project</code> is a special data format, designed to automatically create templates from user data.</p> <p>A Project contains <code>logic</code> to build the end product and <code>fields</code> that describe the data needed.</p> <p>To create an <code>EDL</code>, the <code>fields</code> are rendered as a <code>Form</code>, where user data can be input. This data is applied to the <code>logic</code>, which generates the <code>EDL</code> to be rendered into a finished video.</p>"},{"location":"about/concepts/#render","title":"Render","text":"<p>A <code>Render</code> is the process of finalizing a video, so it can be easily played back as a single file by any machine capable of playing such videos.</p> <p>Rendering is usually a computationally expensive operation, and generally requires powerful hardware to run. With Alfred, rendering is performed in the cloud, using a distributed system, which means any device can be a video editing platform!</p>"},{"location":"about/edl/","title":"Edl","text":"<p>An <code>Edl</code> (Edit Decision List) is a list of <code>Clip</code>s needed to render a finalized video.  <pre><code>class Edl:\n    clips: List[Clip]\n    duration: float = None\n</code></pre> Available properties:</p>"},{"location":"about/edl/#clips","title":"<code>clips</code>","text":"<p><code>List[Clip]</code></p> <p>A list of clips to render into a finalized video.</p> <p>Clip Rendering Order</p> <p><code>Clip</code>s are rendered in the order listed, as a multi-track timeline. </p> <p>i.e. the first clip will be rendered on the \"bottom\" of the video stack, and the last clip will be rendered above all others, with any transparencies applied. </p>"},{"location":"about/edl/#duration","title":"<code>duration</code>","text":"<p><code>float</code></p> <p>An optional duration (in seconds) to trim an <code>Edl</code> to a desired length.</p>"},{"location":"about/project/","title":"Project","text":"<p>A <code>Project</code> is a special type of <code>Edl</code> template, designed to add user data dynamically by specifying rules to create an <code>Edl</code> when data is applied. The end result is generates an <code>Edl</code> that is ready to be rendered.</p> `Project` data format<pre><code>{\n  \"logic\": {\n    // custom Edl logic here\n  },\n  \"fields\": [\n  // a description of the types of data expected,\n  // used to generate a form automatically\n  ]\n}\n</code></pre>"},{"location":"about/project/#use-case","title":"Use case","text":"<p>You have a commercial template which contains a spot for a feature product. This template will always include a single image, with the name of the product above it.</p> <p>The desired <code>Edl</code> will include the base video, with an image and text overlayed on top. </p> Custom Product Project<pre><code>{\n  \"logic\": {\n    {...}, // base video\n    { // product image\n      \"start\": 5,\n      \"type\": \"image\",\n      \"name\": {\n        \"var\": \"ProductImage\"\n      }\n    },\n    { // product name\n      {\n        \"start\": 5,\n        \"type\": \"template\",\n        \"name\": \"textBox\",\n        \"data\": {\n          \"text\": {\n            \"var\": \"ProductName\"\n          }\n        }\n      }\n    }\n  },\n  \"fields\": [\n    { \"type\": \"Text\",\n        \"attrs\": {\n          \"name\": \"ProductImage\",\n          \"text\": \"Link to product image\",\n        }\n    },\n    { \"type\": \"Textarea\",\n        \"attrs\": {\n          \"name\": \"ProductName\",\n          \"text\": \"Product Name\",\n        }\n    },\n  ]\n}\n</code></pre> <p>By creating a template, we can automatically create a commercial for each product, with an automatically generated form to fill out.</p> <p>We can also render each project to multiple formats, or use the entire project as a portion of a larger project!</p> <p><code>Edl</code> vs <code>Project</code></p> <p>By definition, an <code>Edl</code> is a <code>Project</code> that has no special logic, and therefore needs no data.</p> <p>For a full working example, see examples/project.</p>"},{"location":"about/render/","title":"Render","text":"<p>The following are the available properties available to <code>Render</code></p> Render<pre><code>class Render:\n    edl: Edl\n    name: str\n    project: str\n    project_id: id\n    description: str\n    duration: float\n    width: int = 1920\n    height: int = 1080\n    fps: float = 30.0\n    quality: str\n    bitrate: List\n    ffmpeg_params: List[str]\n</code></pre> <p>For a full working example, see examples/render</p>"},{"location":"about/template/","title":"Template","text":"<p>A <code>Template</code> is a <code>Clip</code> designed to render text.</p> <p>Each template can have unique properties, <code>fxs</code>, and values, according to each template schema.</p> <p>Info</p> <p>Full list of values available from the API, at <code>/otto/templates</code></p> <p><pre><code>class Template:\n    name: str\n    text: str\n    data: dict = None\n    color: str = None\n    themecolor: str = None\n    fontsize: float = None\n    clipsize: tuple[int] = (1920,1080)\n    textsize: tuple[int] = None\n    font: str = 'Segoe-UI-Black'\n    method: str = 'caption'\n    duration: float = 5\n    position: str = 'center'\n    opacity: float = .4\n    fps: float = 30\n    bg: str = None\n</code></pre> Available properties:</p>"},{"location":"about/template/#name","title":"<code>name</code>","text":"<p><code>str</code></p> <p>The name of the base template to use. Available options:</p> <ul> <li>title</li> <li>initial</li> <li>bullets</li> <li>final</li> <li>textBox</li> </ul>"},{"location":"about/template/#text","title":"<code>text</code>","text":"<code>str</code>"},{"location":"about/template/#data","title":"<code>data</code>","text":"<code>dict = None</code>"},{"location":"about/template/#color","title":"<code>color</code>","text":"<code>str = None</code>"},{"location":"about/template/#themecolor","title":"<code>themecolor</code>","text":"<code>str = None</code>"},{"location":"about/template/#fontsize","title":"<code>fontsize</code>","text":"<code>float = None</code>"},{"location":"about/template/#clipsize","title":"<code>clipsize</code>","text":"<code>tuple[int] = (1920,1080)</code>"},{"location":"about/template/#textsize","title":"<code>textsize</code>","text":"<code>tuple[int] = None</code>"},{"location":"about/template/#font","title":"<code>font</code>","text":"<code>str = 'Segoe-UI-Black'</code>"},{"location":"about/template/#method","title":"<code>method</code>","text":"<code>str = 'caption'</code>"},{"location":"about/template/#duration","title":"<code>duration</code>","text":"<code>float = 5</code>"},{"location":"about/template/#position","title":"<code>position</code>","text":"<code>str = 'center'</code>"},{"location":"about/template/#opacity","title":"<code>opacity</code>","text":"<code>float = .4</code>"},{"location":"about/template/#fps","title":"<code>fps</code>","text":"<code>float = 30</code>"},{"location":"about/template/#bg","title":"<code>bg</code>","text":"<code>str = None</code>"},{"location":"api/","title":"API","text":"<p>Sometimes, it is more convenient to interact directly with the API, bypassing the browser based client entirely. The following is a guide to interacting with the video renderer directly and generating videos from a data object.</p> <p>This is an advanced topic, and requires some tool to make requests to the server. The following examples are provided using <code>curl</code>, but any requests library will have comparable features.</p> <p>Note</p> <p>For the full API reference (including interactive request generator), visit alfred.quaternion.media/api</p>"},{"location":"api/auth/","title":"Auth","text":"<p>Authentication is performed with JWT token headers. All requests must provide a valid token to access any protected routes.</p> <p>See examples/login</p>"},{"location":"api/otto/","title":"Otto","text":"<p><code>otto</code> is the ottomatic  rendering engine behind alfred's <code>Template</code> logic</p>"},{"location":"api/otto/#workflow","title":"workflow","text":""},{"location":"api/otto/#post-preview","title":"<code>POST /preview</code>","text":"<p>This route is used to generate a single <code>Template</code> and return an image at time <code>t</code> seconds. </p> <p>Useful to check formatting before rendering a full video.</p> <p>See examples/preview</p>"},{"location":"api/render/","title":"Render","text":"<p>The <code>render</code> route accepts an <code>Edl</code>, along with render parameters and initiates a server render process. The status of any render can be checked </p>"},{"location":"api/render/#get-render","title":"<code>GET /render</code>","text":""},{"location":"api/render/#post-render","title":"<code>POST /render</code>","text":""},{"location":"api/render/#issues","title":"issues","text":"<p>Report any issues with renders with the <code>/report/{render}</code> endpoint.</p>"},{"location":"examples/","title":"Examples","text":"<p>The following are several examples, demonstrating basic and advanced capabilities of Alfred.</p> <p>Usage notes</p> <p>All examples here are shown using <code>curl</code>, but any request library will work.</p> <p>All API calls require authentication with a valid jwt <code>TOKEN</code>. See Login for details.</p>"},{"location":"examples/adjust/","title":"Adjust clip","text":""},{"location":"examples/adjust/#resize","title":"Resize","text":"<p>Resizing an image is as simple as passing the resize scale factor.</p> <ul> <li>Values larger than 1 will enlarge the clip</li> <li>Values less than 1 will shrink the clip</li> </ul> data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"resize\": 2.5\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/adjust/#position","title":"Position","text":"<p>Reposition the clip</p> <ul> <li>Positive <code>x</code> values move the image right</li> <li>Negative <code>x</code> values move the image left</li> <li>Positive <code>y</code> values move the image down</li> <li>Negative <code>y</code> values move the image up</li> </ul> AbsoluteRelativeText <p>Move the clip by <code>[x, y]</code> pixels from the top left. data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"position\": [\n          \"center\",\n          \"top\"\n        ]\n      }\n    ]\n  }\n}\n</code></pre></p> <p>Move the clip by <code>[x, y]</code>, where <code>1</code> represents the width or height of the frame.</p> <p>The below example places this video at the center, top of the frame. data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"relative\": true,\n        \"position\": [\n          0.5,\n          1\n        ]\n      }\n    ]\n  }\n}\n</code></pre></p> <p>Place the clip at <code>[x, y]</code> of one of the following coordinates:</p> axis values x <code>left</code>, <code>center</code>, <code>right</code> y <code>top</code>, <code>center</code>, <code>bottom</code> data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"position\": [\n          \"center\",\n          \"top\"\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/advanced/","title":"Advanced","text":""},{"location":"examples/animation/","title":"Animate text","text":"The following generates a text clip which flies in from the right with a 2nd order bezier curve, according to the following control points: c1: <code>(1,0)</code> a: <code>(0,0)</code> c2: <code>(0,1)</code> Animation<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      { \n        \"type\" : \"template\",\n        \"name\" : \"title\",\n        \"data\": {\n          \"text\": \"asdf\",\n          \"fxs\": [\n            {\n              \"name\": \"bezier2\",\n              \"data\": {\n                \"c1x\": 1,\n                \"c1y\": 0,\n                \"ax\": 0,\n                \"ay\": 0,\n                \"c2x\": 0,\n                \"c2y\": 1\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/combine/","title":"Combine media","text":"<p>All clips in the <code>clips</code> list will be combined to create the finished video. </p> <p>The <code>start</code> property defines the desired starting time for each clip (default 0).</p> <p>Rendering order</p> <p>Clips are rendered in the order presented in the list. For clips that overlap in time, the last clip will be rendered above the earlier clips, including any transparencies applied.</p> data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"duration\": 5\n      },\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/train.mp4\",\n        \"inpoint\": 10,\n        \"duration\": 5,\n        \"start\": 5\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/fade/","title":"Fade a clip","text":"<p>By default, clips have no fade time. Adding a <code>fadeIn</code> or <code>fadeOut</code> parameter will create a smooth transition for the specified duration in seconds.</p>"},{"location":"examples/fade/#fade-in","title":"Fade In","text":"fade a clip in fade in<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"fadeIn\": 2\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/fade/#fade-out","title":"fade Out","text":"fade a clip out fade out<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"fadeOut\": 2\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/login/","title":"Login","text":"<p>Tokens can be acquired with a <code>POST</code> request, with a username (email address) and password as form data.</p> <p>Register for new account</p> <p>If you have not already done so, register for a new account by visiting https://alfred.quaternion.media/login</p> <p>Registering can also be performed as an API request:</p> Register<pre><code>curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"your@email\",\"password\":\"yourpassword\",\"first_name\":\"yourname\"}' \\\n  https://alfred.quaternion.media/auth/register\n</code></pre> <p>This returns an object with information about the user. <pre><code>{\"id\":\"801d4a32-ad97-4dfe-9c20-eb98b6640ee2\",\"email\":\"your@email\",\"is_active\":true,\"is_superuser\":false,\"is_verified\":false,\"first_name\":\"yourname\"}\n</code></pre></p> <p>After successful email validation, you can request a login token to use with protected API routes.</p>"},{"location":"examples/login/#request-token","title":"Request token","text":"<pre><code>curl -X POST \\\n  -F \"username=user@email\" \\\n  -F \"password=yourpassword\" \\\n  https://alfred.quaternion.media/auth/jwt/login\n</code></pre>"},{"location":"examples/login/#results","title":"Results","text":"<pre><code>{\n  \"access_token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiZjBmZDg2YTMtMjIwZi00NGQ4LWEwYWMtZjNlMTllYzRjYTE3IiwiYXVkIjpbImZhc3RhcGktdXNlcnM6YXV0aCJdLCJleHAiOjE2Mzc4MDY0MTN9.0eHCVBDbjUkWUY4kwK-VVO-OOVUO6lAfMZUo9XclYlM\",\n  \"token_type\" : \"bearer\"\n}\n</code></pre> <p>Requests can now be made by providing this token in the headers. <pre><code>export TOKEN=y0UrAPiT0k3N...\ncurl \\\n  -H \"Authorization: bearer $TOKEN\" \\\n  https://alfred.quaternion.media/protected\n</code></pre></p> <p><code>curl | jq</code></p> <p>The following is a bash one-liner to create a local <code>$TOKEN</code> variable using <code>curl</code> and <code>jq</code>. <pre><code>export TOKEN=$(curl -X POST \\\n  -F \"username=your@email\"\n  -F \"password=yourpassword\" \\\n  https://alfred.quaternion.media/auth/jwt/login | jq -r '.access_token')\n</code></pre></p>"},{"location":"examples/media/","title":"Add media","text":"<p>All examples here can be previewed or rendered as a full video.</p> PreviewRender <p>Set the <code>t</code> variable to the desired preview time Preview EDL<pre><code>curl -X POST \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @data.json \\\n  https://alfred.quaternion.media/preview?t=1\n</code></pre></p> Render<pre><code>curl -X POST \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @data.json \\\n  https://alfred.quaternion.media/render\n</code></pre>"},{"location":"examples/media/#video","title":"Video","text":"Video source<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"duration\": 10\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/media/#images","title":"Images","text":"Image source<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"image\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/alfred/qm/LanguageArchive.jpg\",\n        \"duration\": 5\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/media/#audio","title":"Audio","text":"Audio source<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"audio\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/alfred/tala/talaaudio.mp3\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/preview/","title":"Preview frame","text":"<p>Preview one frame of an <code>Edl</code> without rendering the full video</p> <p>Preview time</p> <p>Preview time at <code>t</code> seconds is a required query parameter.</p>"},{"location":"examples/preview/#request","title":"Request","text":"EdlRequest data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      { \n        \"type\" : \"template\",\n        \"name\" : \"title\",\n        \"data\": {\n          \"text\": \"asdf\"\n        }\n      }\n    ]\n  }\n}\n</code></pre> Preview template at t=1<pre><code>curl -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d @data.json \\\n  https://alfred.quaternion.media/preview?t=1\n</code></pre>"},{"location":"examples/preview/#results","title":"Results","text":"<p>Returns a local url to the rendered file</p> <p><pre><code>data/20211203-221343.png\n</code></pre> </p>"},{"location":"examples/project/","title":"Working with Projects","text":"<p>The following is a complete example of a <code>Project</code> which makes a 10 second commercial. The desired <code>Edl</code> will include a:</p> <ul> <li>BaseVideo<ul> <li>duration: 10 seconds</li> </ul> </li> <li>ProductImage<ul> <li>starts at 5 seconds</li> <li>resized to appear in the center right</li> </ul> </li> <li>ProductName<ul> <li>starts at 5 seconds</li> <li>the text color can be changed</li> </ul> </li> <li>Logo<ul> <li>positioned at the bottom right corner</li> </ul> </li> </ul> Layer order <p>All media items are rendered from first to last, meaning the final media listed will appear above all others.</p>"},{"location":"examples/project/#project-data","title":"Project Data","text":"data.json<pre><code>{\n  \"name\": \"product commercial\",\n  \"logic\": {\n    \"merge\": [\n      {\n        \"eachKey\": {\n          \"type\": \"video\",\n          \"name\": \"https://storage.googleapis.com/tower-bucket/alfred/qm/Harpo-reel2.mp4\",\n          \"duration\": 10,\n          \"inpoint\": 4\n        }\n      },\n      {\n        \"eachKey\": {\n          \"start\": 5,\n          \"type\": \"image\",\n          \"name\": {\n            \"var\": \"ProductImage\"\n          },\n          \"resize\": 0.8,\n          \"relative\": true,\n          \"position\": [\n            0.3,\n            \"center\"\n          ]\n        }\n      },\n      {\n        \"eachKey\": {\n          \"start\": 5,\n          \"type\": \"template\",\n          \"name\": \"textBox\",\n          \"data\": {\n            \"eachKey\": {\n              \"text\": {\n                \"var\": \"ProductName\"\n              },\n              \"color\": {\n                \"var\": \"TextColor\"\n              }\n            }\n          },\n          \"resize\": 0.9,\n          \"relative\": true,\n          \"position\": [\n            -0.2,\n            -0.2\n          ]\n        }\n      },\n      {\n        \"eachKey\": {\n          \"type\": \"image\",\n          \"name\": {\n            \"var\": \"Logo\"\n          },\n          \"position\": [\n            \"right\",\n            \"bottom\"\n          ]\n        },\n        \"duration\": 10\n      }\n    ]\n  },\n  \"fields\": [\n    {\n      \"type\": \"Image\",\n      \"attrs\": {\n        \"name\": \"Logo\",\n        \"text\": \"Logo\"\n      }\n    },\n    {\n      \"type\": \"Image\",\n      \"attrs\": {\n        \"name\": \"ProductImage\",\n        \"text\": \"Link to product image\"\n      }\n    },\n    {\n      \"type\": \"Textarea\",\n      \"attrs\": {\n        \"name\": \"ProductName\",\n        \"text\": \"Product Name\"\n      }\n    },\n    {\n      \"type\": \"Color\",\n      \"attrs\": {\n        \"name\": \"TextColor\",\n        \"text\": \"Text color\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"examples/project/#projectapi","title":"ProjectAPI","text":"CreateRead AllRead OneUpdateDelete <p>To create a new project, issue a POST request. Create new project<pre><code>curl -X POST \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @data.json \\\n  https://alfred.quaternion.media/project\n</code></pre></p> <p>A successful request returns the object, with it's <code>id</code> number.</p> response<pre><code>{\"_id\":\"61db4127e2ab4bf1fd587ddc\",\"logic\":{...}...}\n</code></pre> <p>To read a list of all projects, issue a GET request. Get all projects<pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  https://alfred.quaternion.media/project\n</code></pre></p> <p>To read a Project, issue a GET request with the id of the project to read. Get one project<pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  https://alfred.quaternion.media/project/$PROJECT_ID\n</code></pre></p> <p>To update a Project, issue a PUT request with the id of the project to update. Update project<pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @data.json \\\n  https://alfred.quaternion.media/project\n</code></pre></p> <p>To delete a Project, issue a DELETE request with the id of the project to delete. Update project<pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @data.json \\\n  https://alfred.quaternion.media/project/$PROJECT_ID\n</code></pre></p>"},{"location":"examples/render/","title":"Render video","text":"<p>Render an <code>Edl</code> with a single video and download the result when finished.</p> <p>See about/edl for a full list of render parameters available.</p>"},{"location":"examples/render/#request","title":"Request","text":"EdlRequest data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\"\n      }\n    ]\n  },\n  \"width\": 1920,\n  \"height\": 1080,\n  \"fps\": 30\n}\n</code></pre> Render Video<pre><code>curl -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d @data.json \\\n  https://alfred.quaternion.media/render\n</code></pre> <p>Parameter passing</p> <p>Render parameters such as <code>width</code> and <code>height</code> can also be specified as query parameters, instead of being passed in the data object.</p> <pre><code>https://alfred.quaternion.media/render?width=1920&amp;height=1080&amp;fps=30\n</code></pre>"},{"location":"examples/render/#result","title":"Result","text":"<p>If the render process started successfully, this returns the <code>id</code> of the render process. RenderId<pre><code>\"61a43a5d6f511ec4ba99ac63\"\n</code></pre></p>"},{"location":"examples/render/#check-status","title":"Check status","text":"<p>Render Video<pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  https://alfred.quaternion.media/render/\n</code></pre> This returns the progress of all current renders, each with their specified <code>RENDER_ID</code>. When <code>status = 100%</code>, rendering is complete, and the video is ready to be viewed, shared, or downloaded.</p>"},{"location":"examples/render/#download","title":"Download","text":"<p>To retrieve a signed link to a render video: Get signed render link<pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  https://alfred.quaternion.media/render/$RENDER_ID\n</code></pre></p> <p>Link expiration</p> <p>All links are generated on demand and are valid for 15 minutes</p>"},{"location":"examples/render/#multiple-formats","title":"Multiple formats","text":"<p>Multiple output formats can be generated from the same <code>Edl</code>. </p> <p>For example:</p> <ul> <li>HD / SD resolutions</li> <li>Horizontal / Vertical aspect ratios</li> <li>Output format</li> <li>Bitrate settings (Web, TV, etc)</li> </ul> <p>For each desired output, generate an API request with the specified render settings and receive an <code>id</code> to use when downloading.</p>"},{"location":"examples/text/","title":"Generate text","text":"<p>This example posts a single <code>Template</code> clip that generates a <code>text</code> in large title format.</p> <p>Preview time</p> <p>Preview time at <code>t</code> seconds is a required query parameter.</p> EdlRequest data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"template\",\n        \"name\": \"title\",\n        \"data\": {\n          \"text\": \"asdf\"\n        }\n      }\n    ]\n  }\n}\n</code></pre> Preview template at t=1<pre><code>curl -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d @data.json \\\n  https://alfred.quaternion.media/preview?t=1\n</code></pre>"},{"location":"examples/text/#results","title":"Results","text":"<p>Returns a local url to the rendered file</p> <p><pre><code>data/20211203-221343.png\n</code></pre> </p>"},{"location":"examples/text/#properties","title":"Properties","text":"<p>Change the Properties of the text by passing <code>data</code> parameters.</p> animation<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"template\",\n        \"name\": \"textBox\",\n        \"data\": {\n          \"text\": \"asdf\",\n          \"font\": \"Open-Sans\",\n          \"color\": \"#FF00FF\"\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/text/#result","title":"Result","text":"<p>For a full list of available properties, see about/template.</p>"},{"location":"examples/trim/","title":"Trim video","text":"<p>Selecting a portion of a video is as simple as defining an <code>inpoint</code>.</p> data.json<pre><code>{\n  \"edl\": {\n    \"clips\": [\n      {\n        \"type\": \"video\",\n        \"name\": \"https://storage.googleapis.com/tower-bucket/moon.mp4\",\n        \"inpoint\": 5,\n        \"duration\": 5\n      }\n    ]\n  }\n}\n</code></pre> <p>The above Edl will result in a 5 second long video, skipping the first 5 seconds of the input.</p>"},{"location":"models/","title":"Models","text":"<p>The following describe the data models Alfred expects to process video.</p> <p>Validation Errors</p> <p>All validation errors will return a <code>422 Unprocessable</code> error, with a detailed error message about the specific parsing error.</p>"}]}