{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Alfred Automatic video tools Overview Alfred is a web based video editing suite, designed to simplify the production process using modern, cloud based solutions. Features Rendering Server based rendering Optional: Use an existing physical or virtual server as an additional rendering node Cloud monitoring tools to check status Secure file storage and downloading Editing Create and modify edits with any HTML5 browser No need for powerful editing hardware Supports mobile devices Preview finished product in browser Render final videos in the cloud Output to different resolutions and formats Templates Define dynamic Templates for clips Create forms for end users to customize a video from a Template Apply fx to clips for text and video animations Forms Design simple forms for end users to apply data into templates Define dynamic properties that can pull from multiple sources Origin Alfred began as a simple, serverless video client, designed to simplify the video production process using modern web browsers with a powerful, scalable rendering engine. Since then, the project has grown to include a suite of video and editing tools, including rendering, template generation, and automations. Alfred Hitchcock Drama is life with all the dull bits cut out. Links App: alfred.quaternion.media Documentation: alfred.quaternion.media/docs/ API Reference: alfred.quaternion.media/api Source code: github.com/quaternionmedia/alfred","title":"Home"},{"location":"#alfred","text":"Automatic video tools","title":"Alfred"},{"location":"#overview","text":"Alfred is a web based video editing suite, designed to simplify the production process using modern, cloud based solutions.","title":"Overview"},{"location":"#features","text":"","title":"Features"},{"location":"#rendering","text":"Server based rendering Optional: Use an existing physical or virtual server as an additional rendering node Cloud monitoring tools to check status Secure file storage and downloading","title":"Rendering"},{"location":"#editing","text":"Create and modify edits with any HTML5 browser No need for powerful editing hardware Supports mobile devices Preview finished product in browser Render final videos in the cloud Output to different resolutions and formats","title":"Editing"},{"location":"#templates","text":"Define dynamic Templates for clips Create forms for end users to customize a video from a Template Apply fx to clips for text and video animations","title":"Templates"},{"location":"#forms","text":"Design simple forms for end users to apply data into templates Define dynamic properties that can pull from multiple sources","title":"Forms"},{"location":"#origin","text":"Alfred began as a simple, serverless video client, designed to simplify the video production process using modern web browsers with a powerful, scalable rendering engine. Since then, the project has grown to include a suite of video and editing tools, including rendering, template generation, and automations. Alfred Hitchcock Drama is life with all the dull bits cut out.","title":"Origin"},{"location":"#links","text":"App: alfred.quaternion.media Documentation: alfred.quaternion.media/docs/ API Reference: alfred.quaternion.media/api Source code: github.com/quaternionmedia/alfred","title":"Links"},{"location":"about/","text":"About Concepts While no video experience is needed to use Alfred effectively, familiarity with the concepts of video editing will be helpful. Design Alfred is split into several components: website The browser based tools to create and edit videos, including: \"simple\" single-track video editor \"advanced\" multi-track video editor template rendering forms preview frame of video check renders status and download API The video rendering components, available as a backend service. Models This section provides information on the properties available in all the models. Clip Template Edl Project Render","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#concepts","text":"While no video experience is needed to use Alfred effectively, familiarity with the concepts of video editing will be helpful.","title":"Concepts"},{"location":"about/#design","text":"Alfred is split into several components:","title":"Design"},{"location":"about/#website","text":"The browser based tools to create and edit videos, including: \"simple\" single-track video editor \"advanced\" multi-track video editor template rendering forms preview frame of video check renders status and download","title":"website"},{"location":"about/#api","text":"The video rendering components, available as a backend service.","title":"API"},{"location":"about/#models","text":"This section provides information on the properties available in all the models.","title":"Models"},{"location":"about/#clip","text":"","title":"Clip"},{"location":"about/#template","text":"","title":"Template"},{"location":"about/#edl","text":"","title":"Edl"},{"location":"about/#project","text":"","title":"Project"},{"location":"about/#render","text":"","title":"Render"},{"location":"about/clip/","text":"Clip A Clip describes a single media source to use in a video project, represented as a json dictionary. class Clip : duration : float = 5 type : str name : str inpoint : float outpoint : float offset : float start : float position : tuple data : dict resize : [ float , tuple ] relative : bool = True fxs : dict Properties All fields are optional. duration float The total length of this clip, in seconds. type str Type of clip. Possible values include: video audio name str The name of this clip. For type: video , this is the url, or relative server path to the desired video. inpoint float The number of seconds from the beginning of clip to the desired start time of the video. outpoint float The number of seconds from the beginning of clip to the desired end time of the video. offset float Offset the start time of the video by n seconds. A positive value behaves the same as start , delaying the start time by n seconds A negative value behaves like a negative inpoint , and will trim from the beginning of clip by n seconds. start float The number of seconds to delay the start of the clip. Positive values only. position tuple ( float , float ) relative: True default - Reposition the clip by (x, y) percent of the frame. relative: False - Reposition the clip by (x, y) pixels relative bool = True Sets whether position acts as absolute position (pixel), or relative (percent). data dict Defines values to be rendered into the template. Data fields are specific to each template. See template Sample JSON Template { \"type\" : \"title\" , \"data\" : { \"text\" : \"Text to be rendered\" , \"font\" : \"font_name\" , \"color\" : \"#FF0000\" , \"textsize\" : \"50\" , \"method\" : \"caption\" , \"duration\" : \"5\" , \"position\" : \"center\" , \"opacity\" : \".5\" , } } resize [ float , tuple ] Scale the size of the clip. float : Scale the clip by x, x tuple : Resize the clip by x, y fxs List Apply a list of fx to a clip. Available FX: boxReveal flyInAndGrow bezier2 zoomFromCenter circleShrink boxShrink drawBoxOutline","title":"Clip"},{"location":"about/clip/#clip","text":"A Clip describes a single media source to use in a video project, represented as a json dictionary. class Clip : duration : float = 5 type : str name : str inpoint : float outpoint : float offset : float start : float position : tuple data : dict resize : [ float , tuple ] relative : bool = True fxs : dict","title":"Clip"},{"location":"about/clip/#properties","text":"All fields are optional.","title":"Properties"},{"location":"about/clip/#duration","text":"float The total length of this clip, in seconds.","title":"duration"},{"location":"about/clip/#type","text":"str Type of clip. Possible values include: video audio","title":"type"},{"location":"about/clip/#name","text":"str The name of this clip. For type: video , this is the url, or relative server path to the desired video.","title":"name"},{"location":"about/clip/#inpoint","text":"float The number of seconds from the beginning of clip to the desired start time of the video.","title":"inpoint"},{"location":"about/clip/#outpoint","text":"float The number of seconds from the beginning of clip to the desired end time of the video.","title":"outpoint"},{"location":"about/clip/#offset","text":"float Offset the start time of the video by n seconds. A positive value behaves the same as start , delaying the start time by n seconds A negative value behaves like a negative inpoint , and will trim from the beginning of clip by n seconds.","title":"offset"},{"location":"about/clip/#start","text":"float The number of seconds to delay the start of the clip. Positive values only.","title":"start"},{"location":"about/clip/#position","text":"tuple ( float , float ) relative: True default - Reposition the clip by (x, y) percent of the frame. relative: False - Reposition the clip by (x, y) pixels","title":"position"},{"location":"about/clip/#relative","text":"bool = True Sets whether position acts as absolute position (pixel), or relative (percent).","title":"relative"},{"location":"about/clip/#data","text":"dict Defines values to be rendered into the template. Data fields are specific to each template. See template Sample JSON Template { \"type\" : \"title\" , \"data\" : { \"text\" : \"Text to be rendered\" , \"font\" : \"font_name\" , \"color\" : \"#FF0000\" , \"textsize\" : \"50\" , \"method\" : \"caption\" , \"duration\" : \"5\" , \"position\" : \"center\" , \"opacity\" : \".5\" , } }","title":"data"},{"location":"about/clip/#resize","text":"[ float , tuple ] Scale the size of the clip. float : Scale the clip by x, x tuple : Resize the clip by x, y","title":"resize"},{"location":"about/clip/#fxs","text":"List Apply a list of fx to a clip. Available FX: boxReveal flyInAndGrow bezier2 zoomFromCenter circleShrink boxShrink drawBoxOutline","title":"fxs"},{"location":"about/concepts/","text":"Concepts Timeline In video editing, a Timeline is a representation of how to create a video. In most video editors, Clips are viewed as blocks, arranged from left to right in time, sized proportionate to their duration. Single Track Video Editing A Timeline where only one clip can be played at a time. This is represented as a List of clips, which can be rearranged in any order. Each clip will play until the duration is reached, or if not specified, the end of the video clip. The total duration of the video is the sum of the duration s of it's clips. Multitrack Video Editing A Timeline where multiple videos can play simultaneously. Necessary for layering videos. A Multi-Track Timeline is also represented as a List of clips, where each video is rendered on a different \"track\", allowing multiple videos to be stacked on top of each other. When combined with transparencies, this allows for unlimited compositing opportunities for new videos. Clip A Clip is a single, continuous section of a video, referenced in a Timeline . Clips can be of several types, including video , audio , template , or edl . Timing of the clip is determined with the following variables: inpoint The start time for playing this video, in seconds. Default: 0 outpoint The end time for playing this video, in seconds. Default: video.duration duration The length in seconds to play this video. Default: video.duration Timing math The duration should always equal to the outpoint - inpoint . Any of these may be omitted, for example: A Clip with outpoint: 10 and duration: 5 implies inpoint: 5 For more details, refer to the Clip documentation. Template A Template is a predefined Clip generator, built to automate and simplify the process of rendering custom text and graphics in video. Each template accepts parameters such as text , font , fontsize , fontcolor , position , fxs , and many others. By default, templates are transparent, which means they can be stacked on top of each other to render more complex video compositions. EDL An EDL , or E dit D ecision L ist, is a list of Clips to be combined into a single video. The EDL is a data representation of the final video to be rendered. It describes all the steps necessary to take the source material ( video , photo , audio , templates , etc.) and generate the desired final product. Each EDL can be viewed in a Timeline , or imported as a Clip into a different Timeline . Project A Project is a special data format, designed to automatically create templates from user data. A Project contains logic to build the end product and fields that describe the data needed. To create an EDL , the fields are rendered as a Form , where user data can be input. This data is applied to the logic , which generates the EDL to be rendered into a finished video. Render A Render is the process of finalizing a video, so it can be easily played back as a single file by any machine capable of playing such videos. Rendering is usually a computationally expensive operation, and generally requires powerful hardware to run. With Alfred, rendering is performed in the cloud, using a distributed system, which means any device can be a video editing platform!","title":"Concepts"},{"location":"about/concepts/#concepts","text":"","title":"Concepts"},{"location":"about/concepts/#timeline","text":"In video editing, a Timeline is a representation of how to create a video. In most video editors, Clips are viewed as blocks, arranged from left to right in time, sized proportionate to their duration.","title":"Timeline"},{"location":"about/concepts/#single-track-video-editing","text":"A Timeline where only one clip can be played at a time. This is represented as a List of clips, which can be rearranged in any order. Each clip will play until the duration is reached, or if not specified, the end of the video clip. The total duration of the video is the sum of the duration s of it's clips.","title":"Single Track Video Editing"},{"location":"about/concepts/#multitrack-video-editing","text":"A Timeline where multiple videos can play simultaneously. Necessary for layering videos. A Multi-Track Timeline is also represented as a List of clips, where each video is rendered on a different \"track\", allowing multiple videos to be stacked on top of each other. When combined with transparencies, this allows for unlimited compositing opportunities for new videos.","title":"Multitrack Video Editing"},{"location":"about/concepts/#clip","text":"A Clip is a single, continuous section of a video, referenced in a Timeline . Clips can be of several types, including video , audio , template , or edl . Timing of the clip is determined with the following variables:","title":"Clip"},{"location":"about/concepts/#inpoint","text":"The start time for playing this video, in seconds. Default: 0","title":"inpoint"},{"location":"about/concepts/#outpoint","text":"The end time for playing this video, in seconds. Default: video.duration","title":"outpoint"},{"location":"about/concepts/#duration","text":"The length in seconds to play this video. Default: video.duration Timing math The duration should always equal to the outpoint - inpoint . Any of these may be omitted, for example: A Clip with outpoint: 10 and duration: 5 implies inpoint: 5 For more details, refer to the Clip documentation.","title":"duration"},{"location":"about/concepts/#template","text":"A Template is a predefined Clip generator, built to automate and simplify the process of rendering custom text and graphics in video. Each template accepts parameters such as text , font , fontsize , fontcolor , position , fxs , and many others. By default, templates are transparent, which means they can be stacked on top of each other to render more complex video compositions.","title":"Template"},{"location":"about/concepts/#edl","text":"An EDL , or E dit D ecision L ist, is a list of Clips to be combined into a single video. The EDL is a data representation of the final video to be rendered. It describes all the steps necessary to take the source material ( video , photo , audio , templates , etc.) and generate the desired final product. Each EDL can be viewed in a Timeline , or imported as a Clip into a different Timeline .","title":"EDL"},{"location":"about/concepts/#project","text":"A Project is a special data format, designed to automatically create templates from user data. A Project contains logic to build the end product and fields that describe the data needed. To create an EDL , the fields are rendered as a Form , where user data can be input. This data is applied to the logic , which generates the EDL to be rendered into a finished video.","title":"Project"},{"location":"about/concepts/#render","text":"A Render is the process of finalizing a video, so it can be easily played back as a single file by any machine capable of playing such videos. Rendering is usually a computationally expensive operation, and generally requires powerful hardware to run. With Alfred, rendering is performed in the cloud, using a distributed system, which means any device can be a video editing platform!","title":"Render"},{"location":"about/edl/","text":"Edl An Edl ( E dit D ecision L ist) is a list of Clip s needed to render a finalized video. class Edl : clips : List [ Clip ] duration : float = None Available properties: clips List [ Clip ] A list of clips to render into a finalized video. Clip Rendering Order Clip s are rendered in the order listed, as a multi-track timeline. i.e. the first clip will be rendered on the \" bottom \" of the video stack, and the last clip will be rendered above all others, with any transparencies applied. duration float An optional duration (in seconds) to trim an Edl to a desired length.","title":"Edl"},{"location":"about/edl/#edl","text":"An Edl ( E dit D ecision L ist) is a list of Clip s needed to render a finalized video. class Edl : clips : List [ Clip ] duration : float = None Available properties:","title":"Edl"},{"location":"about/edl/#clips","text":"List [ Clip ] A list of clips to render into a finalized video. Clip Rendering Order Clip s are rendered in the order listed, as a multi-track timeline. i.e. the first clip will be rendered on the \" bottom \" of the video stack, and the last clip will be rendered above all others, with any transparencies applied.","title":"clips"},{"location":"about/edl/#duration","text":"float An optional duration (in seconds) to trim an Edl to a desired length.","title":"duration"},{"location":"about/project/","text":"Project A Project is a special type of Edl template, designed to add user data dynamically by specifying rules to create an Edl when data is applied. The end result is generates an Edl that is ready to be rendered. `Project` data format { \"logic\" : { // custom Edl logic here }, \"fields\" : [ // a description of the types of data expected, // used to generate a form automatically ] } Use case You have a commercial template which contains a spot for a feature product. This template will always include a single image, with the name of the product above it. The desired Edl will include the base video, with an image and text overlayed on top. Custom Product Project { \"logic\" : { { ... }, // base video { // product image \"start\" : 5 , \"type\" : \"image\" , \"name\" : { \"var\" : \"ProductImage\" } }, { // product name { \"start\" : 5 , \"type\" : \"template\" , \"name\" : \"textBox\" , \"data\" : { \"text\" : { \"var\" : \"ProductName\" } } } } }, \"fields\" : [ { \"type\" : \"Text\" , \"attrs\" : { \"name\" : \"ProductImage\" , \"text\" : \"Link to product image\" , } }, { \"type\" : \"Textarea\" , \"attrs\" : { \"name\" : \"ProductName\" , \"text\" : \"Product Name\" , } }, ] } By creating a template, we can automatically create a commercial for each product, with an automatically generated form to fill out. We can also render each project to multiple formats, or use the entire project as a portion of a larger project! Edl vs Project By definition, an Edl is a Project that has no special logic, and therefore needs no data. For a full working example, see examples/project .","title":"Project"},{"location":"about/project/#project","text":"A Project is a special type of Edl template, designed to add user data dynamically by specifying rules to create an Edl when data is applied. The end result is generates an Edl that is ready to be rendered. `Project` data format { \"logic\" : { // custom Edl logic here }, \"fields\" : [ // a description of the types of data expected, // used to generate a form automatically ] }","title":"Project"},{"location":"about/project/#use-case","text":"You have a commercial template which contains a spot for a feature product. This template will always include a single image, with the name of the product above it. The desired Edl will include the base video, with an image and text overlayed on top. Custom Product Project { \"logic\" : { { ... }, // base video { // product image \"start\" : 5 , \"type\" : \"image\" , \"name\" : { \"var\" : \"ProductImage\" } }, { // product name { \"start\" : 5 , \"type\" : \"template\" , \"name\" : \"textBox\" , \"data\" : { \"text\" : { \"var\" : \"ProductName\" } } } } }, \"fields\" : [ { \"type\" : \"Text\" , \"attrs\" : { \"name\" : \"ProductImage\" , \"text\" : \"Link to product image\" , } }, { \"type\" : \"Textarea\" , \"attrs\" : { \"name\" : \"ProductName\" , \"text\" : \"Product Name\" , } }, ] } By creating a template, we can automatically create a commercial for each product, with an automatically generated form to fill out. We can also render each project to multiple formats, or use the entire project as a portion of a larger project! Edl vs Project By definition, an Edl is a Project that has no special logic, and therefore needs no data. For a full working example, see examples/project .","title":"Use case"},{"location":"about/render/","text":"Render The following are the available properties available to Render Render class Render : edl : Edl name : str project : str project_id : id description : str duration : float width : int = 1920 height : int = 1080 fps : float = 30.0 quality : str bitrate : List ffmpeg_params : List [ str ] For a full working example, see examples/render","title":"Render"},{"location":"about/render/#render","text":"The following are the available properties available to Render Render class Render : edl : Edl name : str project : str project_id : id description : str duration : float width : int = 1920 height : int = 1080 fps : float = 30.0 quality : str bitrate : List ffmpeg_params : List [ str ] For a full working example, see examples/render","title":"Render"},{"location":"about/template/","text":"Template A Template is a Clip designed to render text. Each template can have unique properties, fxs , and values, according to each template schema. Info Full list of values available from the API, at /otto/templates class Template : name : str text : str data : dict = None color : str = None themecolor : str = None fontsize : float = None clipsize : tuple [ int ] = ( 1920 , 1080 ) textsize : tuple [ int ] = None font : str = 'Segoe-UI-Black' method : str = 'caption' duration : float = 5 position : str = 'center' opacity : float = .4 fps : float = 30 bg : str = None Available properties: name str The name of the base template to use. Available options: title initial bullets final textBox text str data dict = None color str = None themecolor str = None fontsize float = None clipsize tuple [ int ] = ( 1920 , 1080 ) textsize tuple [ int ] = None font str = 'Segoe-UI-Black' method str = 'caption' duration float = 5 position str = 'center' opacity float = .4 fps float = 30 bg str = None","title":"Template"},{"location":"about/template/#template","text":"A Template is a Clip designed to render text. Each template can have unique properties, fxs , and values, according to each template schema. Info Full list of values available from the API, at /otto/templates class Template : name : str text : str data : dict = None color : str = None themecolor : str = None fontsize : float = None clipsize : tuple [ int ] = ( 1920 , 1080 ) textsize : tuple [ int ] = None font : str = 'Segoe-UI-Black' method : str = 'caption' duration : float = 5 position : str = 'center' opacity : float = .4 fps : float = 30 bg : str = None Available properties:","title":"Template"},{"location":"about/template/#name","text":"str The name of the base template to use. Available options: title initial bullets final textBox","title":"name"},{"location":"about/template/#text","text":"str","title":"text"},{"location":"about/template/#data","text":"dict = None","title":"data"},{"location":"about/template/#color","text":"str = None","title":"color"},{"location":"about/template/#themecolor","text":"str = None","title":"themecolor"},{"location":"about/template/#fontsize","text":"float = None","title":"fontsize"},{"location":"about/template/#clipsize","text":"tuple [ int ] = ( 1920 , 1080 )","title":"clipsize"},{"location":"about/template/#textsize","text":"tuple [ int ] = None","title":"textsize"},{"location":"about/template/#font","text":"str = 'Segoe-UI-Black'","title":"font"},{"location":"about/template/#method","text":"str = 'caption'","title":"method"},{"location":"about/template/#duration","text":"float = 5","title":"duration"},{"location":"about/template/#position","text":"str = 'center'","title":"position"},{"location":"about/template/#opacity","text":"float = .4","title":"opacity"},{"location":"about/template/#fps","text":"float = 30","title":"fps"},{"location":"about/template/#bg","text":"str = None","title":"bg"},{"location":"api/","text":"API Sometimes, it is more convenient to interact directly with the API, bypassing the browser based client entirely. The following is a guide to interacting with the video renderer directly and generating videos from a data object. This is an advanced topic, and requires some tool to make requests to the server. The following examples are provided using curl , but any requests library will have comparable features. Note For the full API reference (including interactive request generator), visit alfred.quaternion.media/api","title":"API"},{"location":"api/#api","text":"Sometimes, it is more convenient to interact directly with the API, bypassing the browser based client entirely. The following is a guide to interacting with the video renderer directly and generating videos from a data object. This is an advanced topic, and requires some tool to make requests to the server. The following examples are provided using curl , but any requests library will have comparable features. Note For the full API reference (including interactive request generator), visit alfred.quaternion.media/api","title":"API"},{"location":"api/auth/","text":"Auth Authentication is performed with JWT token headers. All requests must provide a valid token to access any protected routes. See examples/login","title":"Auth"},{"location":"api/auth/#auth","text":"Authentication is performed with JWT token headers. All requests must provide a valid token to access any protected routes. See examples/login","title":"Auth"},{"location":"api/otto/","text":"Otto otto is the otto matic rendering engine behind alfred's Template logic workflow POST /preview This route is used to generate a single Template and return an image at time t seconds. Useful to check formatting before rendering a full video. See examples/preview","title":"Otto"},{"location":"api/otto/#otto","text":"otto is the otto matic rendering engine behind alfred's Template logic","title":"Otto"},{"location":"api/otto/#workflow","text":"","title":"workflow"},{"location":"api/otto/#post-preview","text":"This route is used to generate a single Template and return an image at time t seconds. Useful to check formatting before rendering a full video. See examples/preview","title":"POST /preview"},{"location":"api/render/","text":"Render The render route accepts an Edl , along with render parameters and initiates a server render process. The status of any render can be checked GET /render POST /render issues Report any issues with renders with the /report/{render} endpoint.","title":"Render"},{"location":"api/render/#render","text":"The render route accepts an Edl , along with render parameters and initiates a server render process. The status of any render can be checked","title":"Render"},{"location":"api/render/#get-render","text":"","title":"GET /render"},{"location":"api/render/#post-render","text":"","title":"POST /render"},{"location":"api/render/#issues","text":"Report any issues with renders with the /report/{render} endpoint.","title":"issues"},{"location":"examples/","text":"Examples The following are several examples, demonstrating basic and advanced capabilities of Alfred. Usage notes All examples here are shown using curl , but any request library will work. All API calls require authentication with a valid jwt TOKEN . See Login for details.","title":"Examples"},{"location":"examples/#examples","text":"The following are several examples, demonstrating basic and advanced capabilities of Alfred. Usage notes All examples here are shown using curl , but any request library will work. All API calls require authentication with a valid jwt TOKEN . See Login for details.","title":"Examples"},{"location":"examples/adjust/","text":"Adjust clip Resize Resizing an image is as simple as passing the resize scale factor. Values larger than 1 will enlarge the clip Values less than 1 will shrink the clip data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"resize\" : 2.5 } ] } } Position Reposition the clip Positive x values move the image right Negative x values move the image left Positive y values move the image down Negative y values move the image up Absolute Relative Text Move the clip by [x, y] pixels from the top left. data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"position\" : [ \"center\" , \"top\" ] } ] } } Move the clip by [x, y] , where 1 represents the width or height of the frame. The below example places this video at the center, top of the frame. data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"relative\" : true , \"position\" : [ 0.5 , 1 ] } ] } } Place the clip at [x, y] of one of the following coordinates: axis values x left , center , right y top , center , bottom data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"position\" : [ \"center\" , \"top\" ] } ] } }","title":"Adjust clip"},{"location":"examples/adjust/#adjust-clip","text":"","title":"Adjust clip"},{"location":"examples/adjust/#resize","text":"Resizing an image is as simple as passing the resize scale factor. Values larger than 1 will enlarge the clip Values less than 1 will shrink the clip data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"resize\" : 2.5 } ] } }","title":"Resize"},{"location":"examples/adjust/#position","text":"Reposition the clip Positive x values move the image right Negative x values move the image left Positive y values move the image down Negative y values move the image up Absolute Relative Text Move the clip by [x, y] pixels from the top left. data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"position\" : [ \"center\" , \"top\" ] } ] } } Move the clip by [x, y] , where 1 represents the width or height of the frame. The below example places this video at the center, top of the frame. data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"relative\" : true , \"position\" : [ 0.5 , 1 ] } ] } } Place the clip at [x, y] of one of the following coordinates: axis values x left , center , right y top , center , bottom data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"position\" : [ \"center\" , \"top\" ] } ] } }","title":"Position"},{"location":"examples/advanced/","text":"Advanced","title":"Advanced"},{"location":"examples/advanced/#advanced","text":"","title":"Advanced"},{"location":"examples/animation/","text":"Animate text The following generates a text clip which flies in from the right with a 2nd order bezier curve, according to the following control points: c1: (1,0) a: (0,0) c2: (0,1) Animation { \"edl\" : { \"clips\" : [ { \"type\" : \"template\" , \"name\" : \"title\" , \"data\" : { \"text\" : \"asdf\" , \"fxs\" : [ { \"name\" : \"bezier2\" , \"data\" : { \"c1x\" : 1 , \"c1y\" : 0 , \"ax\" : 0 , \"ay\" : 0 , \"c2x\" : 0 , \"c2y\" : 1 } } ] } } ] } }","title":"Animate text"},{"location":"examples/animation/#animate-text","text":"The following generates a text clip which flies in from the right with a 2nd order bezier curve, according to the following control points: c1: (1,0) a: (0,0) c2: (0,1) Animation { \"edl\" : { \"clips\" : [ { \"type\" : \"template\" , \"name\" : \"title\" , \"data\" : { \"text\" : \"asdf\" , \"fxs\" : [ { \"name\" : \"bezier2\" , \"data\" : { \"c1x\" : 1 , \"c1y\" : 0 , \"ax\" : 0 , \"ay\" : 0 , \"c2x\" : 0 , \"c2y\" : 1 } } ] } } ] } }","title":"Animate text"},{"location":"examples/combine/","text":"Combine media All clips in the clips list will be combined to create the finished video. The start property defines the desired starting time for each clip (default 0). Rendering order Clips are rendered in the order presented in the list. For clips that overlap in time, the last clip will be rendered above the earlier clips, including any transparencies applied. data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"duration\" : 5 }, { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/train.mp4\" , \"inpoint\" : 10 , \"duration\" : 5 , \"start\" : 5 } ] } }","title":"Combine media"},{"location":"examples/combine/#combine-media","text":"All clips in the clips list will be combined to create the finished video. The start property defines the desired starting time for each clip (default 0). Rendering order Clips are rendered in the order presented in the list. For clips that overlap in time, the last clip will be rendered above the earlier clips, including any transparencies applied. data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"duration\" : 5 }, { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/train.mp4\" , \"inpoint\" : 10 , \"duration\" : 5 , \"start\" : 5 } ] } }","title":"Combine media"},{"location":"examples/fade/","text":"Fade a clip By default, clips have no fade time. Adding a fadeIn or fadeOut parameter will create a smooth transition for the specified duration in seconds. Fade In fade a clip in fade in { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"fadeIn\" : 2 } ] } } fade Out fade a clip out fade out { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"fadeOut\" : 2 } ] } }","title":"Fade a clip"},{"location":"examples/fade/#fade-a-clip","text":"By default, clips have no fade time. Adding a fadeIn or fadeOut parameter will create a smooth transition for the specified duration in seconds.","title":"Fade a clip"},{"location":"examples/fade/#fade-in","text":"fade a clip in fade in { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"fadeIn\" : 2 } ] } }","title":"Fade In"},{"location":"examples/fade/#fade-out","text":"fade a clip out fade out { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"fadeOut\" : 2 } ] } }","title":"fade Out"},{"location":"examples/login/","text":"Login Tokens can be acquired with a POST request, with a username (email address) and password as form data. Register for new account If you have not already done so, register for a new account by visiting https://alfred.quaternion.media/login Registering can also be performed as an API request: Register curl -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"email\":\"your@email\",\"password\":\"yourpassword\",\"first_name\":\"yourname\"}' \\ https://alfred.quaternion.media/auth/register This returns an object with information about the user. { \"id\" : \"801d4a32-ad97-4dfe-9c20-eb98b6640ee2\" , \"email\" : \"your@email\" , \"is_active\" : true , \"is_superuser\" : false , \"is_verified\" : false , \"first_name\" : \"yourname\" } After successful email validation, you can request a login token to use with protected API routes. Request token curl -X POST \\ -F \"username=user@email\" \\ -F \"password=yourpassword\" \\ https://alfred.quaternion.media/auth/jwt/login Results { \"access_token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiZjBmZDg2YTMtMjIwZi00NGQ4LWEwYWMtZjNlMTllYzRjYTE3IiwiYXVkIjpbImZhc3RhcGktdXNlcnM6YXV0aCJdLCJleHAiOjE2Mzc4MDY0MTN9.0eHCVBDbjUkWUY4kwK-VVO-OOVUO6lAfMZUo9XclYlM\" , \"token_type\" : \"bearer\" } Requests can now be made by providing this token in the headers. export TOKEN = y0UrAPiT0k3N... curl \\ -H \"Authorization: bearer $TOKEN \" \\ https://alfred.quaternion.media/protected curl | jq The following is a bash one-liner to create a local $TOKEN variable using curl and jq . export TOKEN = $( curl -X POST \\ -F \"username=your@email\" -F \"password=yourpassword\" \\ https://alfred.quaternion.media/auth/jwt/login | jq -r '.access_token' )","title":"Login"},{"location":"examples/login/#login","text":"Tokens can be acquired with a POST request, with a username (email address) and password as form data. Register for new account If you have not already done so, register for a new account by visiting https://alfred.quaternion.media/login Registering can also be performed as an API request: Register curl -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"email\":\"your@email\",\"password\":\"yourpassword\",\"first_name\":\"yourname\"}' \\ https://alfred.quaternion.media/auth/register This returns an object with information about the user. { \"id\" : \"801d4a32-ad97-4dfe-9c20-eb98b6640ee2\" , \"email\" : \"your@email\" , \"is_active\" : true , \"is_superuser\" : false , \"is_verified\" : false , \"first_name\" : \"yourname\" } After successful email validation, you can request a login token to use with protected API routes.","title":"Login"},{"location":"examples/login/#request-token","text":"curl -X POST \\ -F \"username=user@email\" \\ -F \"password=yourpassword\" \\ https://alfred.quaternion.media/auth/jwt/login","title":"Request token"},{"location":"examples/login/#results","text":"{ \"access_token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiZjBmZDg2YTMtMjIwZi00NGQ4LWEwYWMtZjNlMTllYzRjYTE3IiwiYXVkIjpbImZhc3RhcGktdXNlcnM6YXV0aCJdLCJleHAiOjE2Mzc4MDY0MTN9.0eHCVBDbjUkWUY4kwK-VVO-OOVUO6lAfMZUo9XclYlM\" , \"token_type\" : \"bearer\" } Requests can now be made by providing this token in the headers. export TOKEN = y0UrAPiT0k3N... curl \\ -H \"Authorization: bearer $TOKEN \" \\ https://alfred.quaternion.media/protected curl | jq The following is a bash one-liner to create a local $TOKEN variable using curl and jq . export TOKEN = $( curl -X POST \\ -F \"username=your@email\" -F \"password=yourpassword\" \\ https://alfred.quaternion.media/auth/jwt/login | jq -r '.access_token' )","title":"Results"},{"location":"examples/media/","text":"Add media All examples here can be previewed or rendered as a full video. Preview Render Set the t variable to the desired preview time Preview EDL curl -X POST \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/preview?t = 1 Render curl -X POST \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/render Video Video source { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"duration\" : 10 } ] } } Images Image source { \"edl\" : { \"clips\" : [ { \"type\" : \"image\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/alfred/qm/LanguageArchive.jpg\" , \"duration\" : 5 } ] } } Audio Audio source { \"edl\" : { \"clips\" : [ { \"type\" : \"audio\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/alfred/tala/talaaudio.mp3\" } ] } }","title":"Add media"},{"location":"examples/media/#add-media","text":"All examples here can be previewed or rendered as a full video. Preview Render Set the t variable to the desired preview time Preview EDL curl -X POST \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/preview?t = 1 Render curl -X POST \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/render","title":"Add media"},{"location":"examples/media/#video","text":"Video source { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"duration\" : 10 } ] } }","title":"Video"},{"location":"examples/media/#images","text":"Image source { \"edl\" : { \"clips\" : [ { \"type\" : \"image\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/alfred/qm/LanguageArchive.jpg\" , \"duration\" : 5 } ] } }","title":"Images"},{"location":"examples/media/#audio","text":"Audio source { \"edl\" : { \"clips\" : [ { \"type\" : \"audio\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/alfred/tala/talaaudio.mp3\" } ] } }","title":"Audio"},{"location":"examples/preview/","text":"Preview frame Preview one frame of an Edl without rendering the full video Preview time Preview time at t seconds is a required query parameter. Request Edl Request data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"template\" , \"name\" : \"title\" , \"data\" : { \"text\" : \"asdf\" } } ] } } Preview template at t=1 curl -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $TOKEN \" \\ -d @data.json \\ https://alfred.quaternion.media/preview?t = 1 Results Returns a local url to the rendered file data/20211203-221343.png","title":"Preview frame"},{"location":"examples/preview/#preview-frame","text":"Preview one frame of an Edl without rendering the full video Preview time Preview time at t seconds is a required query parameter.","title":"Preview frame"},{"location":"examples/preview/#request","text":"Edl Request data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"template\" , \"name\" : \"title\" , \"data\" : { \"text\" : \"asdf\" } } ] } } Preview template at t=1 curl -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $TOKEN \" \\ -d @data.json \\ https://alfred.quaternion.media/preview?t = 1","title":"Request"},{"location":"examples/preview/#results","text":"Returns a local url to the rendered file data/20211203-221343.png","title":"Results"},{"location":"examples/project/","text":"Working with Projects The following is a complete example of a Project which makes a 10 second commercial. The desired Edl will include a: BaseVideo duration: 10 seconds ProductImage starts at 5 seconds resized to appear in the center right ProductName starts at 5 seconds the text color can be changed Logo positioned at the bottom right corner Layer order All media items are rendered from first to last, meaning the final media listed will appear above all others. Project Data data.json { \"name\" : \"product commercial\" , \"logic\" : { \"merge\" : [ { \"eachKey\" : { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/alfred/qm/Harpo-reel2.mp4\" , \"duration\" : 10 , \"inpoint\" : 4 } }, { \"eachKey\" : { \"start\" : 5 , \"type\" : \"image\" , \"name\" : { \"var\" : \"ProductImage\" }, \"resize\" : 0.8 , \"relative\" : true , \"position\" : [ 0.3 , \"center\" ] } }, { \"eachKey\" : { \"start\" : 5 , \"type\" : \"template\" , \"name\" : \"textBox\" , \"data\" : { \"eachKey\" : { \"text\" : { \"var\" : \"ProductName\" }, \"color\" : { \"var\" : \"TextColor\" } } }, \"resize\" : 0.9 , \"relative\" : true , \"position\" : [ -0.2 , -0.2 ] } }, { \"eachKey\" : { \"type\" : \"image\" , \"name\" : { \"var\" : \"Logo\" }, \"position\" : [ \"right\" , \"bottom\" ] }, \"duration\" : 10 } ] }, \"fields\" : [ { \"type\" : \"Image\" , \"attrs\" : { \"name\" : \"Logo\" , \"text\" : \"Logo\" } }, { \"type\" : \"Image\" , \"attrs\" : { \"name\" : \"ProductImage\" , \"text\" : \"Link to product image\" } }, { \"type\" : \"Textarea\" , \"attrs\" : { \"name\" : \"ProductName\" , \"text\" : \"Product Name\" } }, { \"type\" : \"Color\" , \"attrs\" : { \"name\" : \"TextColor\" , \"text\" : \"Text color\" } } ] } ProjectAPI Create Read All Read One Update Delete To create a new project, issue a POST request. Create new project curl -X POST \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/project A successful request returns the object, with it's id number. response { \"_id\" : \"61db4127e2ab4bf1fd587ddc\" , \"logic\" :{ ... } ... } To read a list of all projects, issue a GET request. Get all projects curl -H \"Authorization: Bearer $TOKEN \" \\ https://alfred.quaternion.media/project To read a Project, issue a GET request with the id of the project to read. Get one project curl -H \"Authorization: Bearer $TOKEN \" \\ https://alfred.quaternion.media/project/ $PROJECT_ID To update a Project, issue a PUT request with the id of the project to update. Update project curl -X PUT \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/project To delete a Project, issue a DELETE request with the id of the project to delete. Update project curl -X PUT \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/project/ $PROJECT_ID","title":"Working with Projects"},{"location":"examples/project/#working-with-projects","text":"The following is a complete example of a Project which makes a 10 second commercial. The desired Edl will include a: BaseVideo duration: 10 seconds ProductImage starts at 5 seconds resized to appear in the center right ProductName starts at 5 seconds the text color can be changed Logo positioned at the bottom right corner Layer order All media items are rendered from first to last, meaning the final media listed will appear above all others.","title":"Working with Projects"},{"location":"examples/project/#project-data","text":"data.json { \"name\" : \"product commercial\" , \"logic\" : { \"merge\" : [ { \"eachKey\" : { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/alfred/qm/Harpo-reel2.mp4\" , \"duration\" : 10 , \"inpoint\" : 4 } }, { \"eachKey\" : { \"start\" : 5 , \"type\" : \"image\" , \"name\" : { \"var\" : \"ProductImage\" }, \"resize\" : 0.8 , \"relative\" : true , \"position\" : [ 0.3 , \"center\" ] } }, { \"eachKey\" : { \"start\" : 5 , \"type\" : \"template\" , \"name\" : \"textBox\" , \"data\" : { \"eachKey\" : { \"text\" : { \"var\" : \"ProductName\" }, \"color\" : { \"var\" : \"TextColor\" } } }, \"resize\" : 0.9 , \"relative\" : true , \"position\" : [ -0.2 , -0.2 ] } }, { \"eachKey\" : { \"type\" : \"image\" , \"name\" : { \"var\" : \"Logo\" }, \"position\" : [ \"right\" , \"bottom\" ] }, \"duration\" : 10 } ] }, \"fields\" : [ { \"type\" : \"Image\" , \"attrs\" : { \"name\" : \"Logo\" , \"text\" : \"Logo\" } }, { \"type\" : \"Image\" , \"attrs\" : { \"name\" : \"ProductImage\" , \"text\" : \"Link to product image\" } }, { \"type\" : \"Textarea\" , \"attrs\" : { \"name\" : \"ProductName\" , \"text\" : \"Product Name\" } }, { \"type\" : \"Color\" , \"attrs\" : { \"name\" : \"TextColor\" , \"text\" : \"Text color\" } } ] }","title":"Project Data"},{"location":"examples/project/#projectapi","text":"Create Read All Read One Update Delete To create a new project, issue a POST request. Create new project curl -X POST \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/project A successful request returns the object, with it's id number. response { \"_id\" : \"61db4127e2ab4bf1fd587ddc\" , \"logic\" :{ ... } ... } To read a list of all projects, issue a GET request. Get all projects curl -H \"Authorization: Bearer $TOKEN \" \\ https://alfred.quaternion.media/project To read a Project, issue a GET request with the id of the project to read. Get one project curl -H \"Authorization: Bearer $TOKEN \" \\ https://alfred.quaternion.media/project/ $PROJECT_ID To update a Project, issue a PUT request with the id of the project to update. Update project curl -X PUT \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/project To delete a Project, issue a DELETE request with the id of the project to delete. Update project curl -X PUT \\ -H \"Authorization: Bearer $TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d @data.json \\ https://alfred.quaternion.media/project/ $PROJECT_ID","title":"ProjectAPI"},{"location":"examples/render/","text":"Render video Render an Edl with a single video and download the result when finished. See about/edl for a full list of render parameters available. Request Edl Request data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" } ] }, \"width\" : 1920 , \"height\" : 1080 , \"fps\" : 30 } Render Video curl -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $TOKEN \" \\ -d @data.json \\ https://alfred.quaternion.media/render Parameter passing Render parameters such as width and height can also be specified as query parameters, instead of being passed in the data object. https://alfred.quaternion.media/render?width=1920&height=1080&fps=30 Result If the render process started successfully, this returns the id of the render process. RenderId \"61a43a5d6f511ec4ba99ac63\" Check status Render Video curl -H \"Authorization: Bearer $TOKEN \" \\ https://alfred.quaternion.media/render/ This returns the progress of all current renders, each with their specified RENDER_ID . When status = 100% , rendering is complete, and the video is ready to be viewed, shared, or downloaded. Download To retrieve a signed link to a render video: Get signed render link curl -H \"Authorization: Bearer $TOKEN \" \\ https://alfred.quaternion.media/render/ $RENDER_ID Link expiration All links are generated on demand and are valid for 15 minutes Multiple formats Multiple output formats can be generated from the same Edl . For example: HD / SD resolutions Horizontal / Vertical aspect ratios Output format Bitrate settings (Web, TV, etc) For each desired output, generate an API request with the specified render settings and receive an id to use when downloading.","title":"Render video"},{"location":"examples/render/#render-video","text":"Render an Edl with a single video and download the result when finished. See about/edl for a full list of render parameters available.","title":"Render video"},{"location":"examples/render/#request","text":"Edl Request data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" } ] }, \"width\" : 1920 , \"height\" : 1080 , \"fps\" : 30 } Render Video curl -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $TOKEN \" \\ -d @data.json \\ https://alfred.quaternion.media/render Parameter passing Render parameters such as width and height can also be specified as query parameters, instead of being passed in the data object. https://alfred.quaternion.media/render?width=1920&height=1080&fps=30","title":"Request"},{"location":"examples/render/#result","text":"If the render process started successfully, this returns the id of the render process. RenderId \"61a43a5d6f511ec4ba99ac63\"","title":"Result"},{"location":"examples/render/#check-status","text":"Render Video curl -H \"Authorization: Bearer $TOKEN \" \\ https://alfred.quaternion.media/render/ This returns the progress of all current renders, each with their specified RENDER_ID . When status = 100% , rendering is complete, and the video is ready to be viewed, shared, or downloaded.","title":"Check status"},{"location":"examples/render/#download","text":"To retrieve a signed link to a render video: Get signed render link curl -H \"Authorization: Bearer $TOKEN \" \\ https://alfred.quaternion.media/render/ $RENDER_ID Link expiration All links are generated on demand and are valid for 15 minutes","title":"Download"},{"location":"examples/render/#multiple-formats","text":"Multiple output formats can be generated from the same Edl . For example: HD / SD resolutions Horizontal / Vertical aspect ratios Output format Bitrate settings (Web, TV, etc) For each desired output, generate an API request with the specified render settings and receive an id to use when downloading.","title":"Multiple formats"},{"location":"examples/text/","text":"Generate text This example posts a single Template clip that generates a text in large title format. Preview time Preview time at t seconds is a required query parameter. Edl Request data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"template\" , \"name\" : \"title\" , \"data\" : { \"text\" : \"asdf\" } } ] } } Preview template at t=1 curl -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $TOKEN \" \\ -d @data.json \\ https://alfred.quaternion.media/preview?t = 1 Results Returns a local url to the rendered file data/20211203-221343.png Properties Change the Properties of the text by passing data parameters. animation { \"edl\" : { \"clips\" : [ { \"type\" : \"template\" , \"name\" : \"textBox\" , \"data\" : { \"text\" : \"asdf\" , \"font\" : \"Open-Sans\" , \"color\" : \"#FF00FF\" } } ] } } Result For a full list of available properties, see about/template .","title":"Generate text"},{"location":"examples/text/#generate-text","text":"This example posts a single Template clip that generates a text in large title format. Preview time Preview time at t seconds is a required query parameter. Edl Request data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"template\" , \"name\" : \"title\" , \"data\" : { \"text\" : \"asdf\" } } ] } } Preview template at t=1 curl -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $TOKEN \" \\ -d @data.json \\ https://alfred.quaternion.media/preview?t = 1","title":"Generate text"},{"location":"examples/text/#results","text":"Returns a local url to the rendered file data/20211203-221343.png","title":"Results"},{"location":"examples/text/#properties","text":"Change the Properties of the text by passing data parameters. animation { \"edl\" : { \"clips\" : [ { \"type\" : \"template\" , \"name\" : \"textBox\" , \"data\" : { \"text\" : \"asdf\" , \"font\" : \"Open-Sans\" , \"color\" : \"#FF00FF\" } } ] } }","title":"Properties"},{"location":"examples/text/#result","text":"For a full list of available properties, see about/template .","title":"Result"},{"location":"examples/trim/","text":"Trim video Selecting a portion of a video is as simple as defining an inpoint . data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"inpoint\" : 5 , \"duration\" : 5 } ] } } The above Edl will result in a 5 second long video, skipping the first 5 seconds of the input.","title":"Trim video"},{"location":"examples/trim/#trim-video","text":"Selecting a portion of a video is as simple as defining an inpoint . data.json { \"edl\" : { \"clips\" : [ { \"type\" : \"video\" , \"name\" : \"https://storage.googleapis.com/tower-bucket/moon.mp4\" , \"inpoint\" : 5 , \"duration\" : 5 } ] } } The above Edl will result in a 5 second long video, skipping the first 5 seconds of the input.","title":"Trim video"},{"location":"models/","text":"Models The following describe the data models Alfred expects to process video. Validation Errors All validation errors will return a 422 Unprocessable error, with a detailed error message about the specific parsing error.","title":"Models"},{"location":"models/#models","text":"The following describe the data models Alfred expects to process video. Validation Errors All validation errors will return a 422 Unprocessable error, with a detailed error message about the specific parsing error.","title":"Models"}]}